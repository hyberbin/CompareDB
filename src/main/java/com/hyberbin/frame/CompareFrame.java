/*
 * Copyright 2014 Hyberbin.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * Email:hyberbin@qq.com
 */
package com.hyberbin.frame;

import com.hyberbin.compare.MysqlColumnMerge;
import com.hyberbin.compare.IColumnMerge;
import com.hyberbin.db.ConnectionUtil;
import com.hyberbin.db.ICompareDb;
import com.hyberbin.model.CodeTableListModel;
import com.hyberbin.model.DataRowModel;
import com.hyberbin.model.TableListModel;
import com.hyberbin.util.IndexUtil;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.jplus.hyb.database.crud.DatabaseAccess;
import org.jplus.hyb.database.crud.Hyberbin;
import org.jplus.hyb.database.transaction.IDbManager;
import org.jplus.hyb.database.util.Pager;
import org.jplus.hyb.log.Logger;
import org.jplus.hyb.log.LoggerManager;
import org.jplus.util.FileUtils;
import org.jplus.util.ObjectHelper;

/**
 *
 * @author Hyberbin
 */
public class CompareFrame extends javax.swing.JFrame {

    private final static Logger log = LoggerManager.getLogger(CompareFrame.class);
    private final ICompareDb compareUtil;

    /** Creates new form CompareFrame
     * @param startFrame */
    public CompareFrame(final StartFrame startFrame,ICompareDb compareUtil) {
        initComponents();
        this.compareUtil=compareUtil;
        Toolkit tk = Toolkit.getDefaultToolkit();
        setLocation((tk.getScreenSize().width - getSize().width) / 2,
                (tk.getScreenSize().height - getSize().height) / 2);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent event) {
                dispose();
                try {
                    ConnectionUtil.getCompareConn().finalCloseConnection();
                    ConnectionUtil.getMainConn().finalCloseConnection();
                } catch (SQLException ex) {
                    log.error("关闭数据连接出错！", ex);
                }
                startFrame.setVisible(true);
            }
        });
        TableColumn column0 = jTable1.getColumnModel().getColumn(0);
        column0.setPreferredWidth(30);
        column0.setMaxWidth(30);
        column0.setMinWidth(30);
        TableColumn column1 = jTable1.getColumnModel().getColumn(1);
        column1.setPreferredWidth(100);
        column1.setMaxWidth(150);
        TableColumn column2 = jTable1.getColumnModel().getColumn(2);
        column2.setPreferredWidth(80);
        column2.setMaxWidth(80);
        column2.setMinWidth(80);
        TableColumn column3 = jTable1.getColumnModel().getColumn(3);
        column3.setPreferredWidth(40);
        column3.setMaxWidth(40);
        column3.setMinWidth(40);
        TableColumn column4 = jTable1.getColumnModel().getColumn(4);
        column4.setPreferredWidth(80);
        column4.setMaxWidth(150);
        this.setVisible(true);

    }

    public void iniAll(String table) {
        IDbManager mainConn = ConnectionUtil.getMainConn();
        List<Map> showTables = compareUtil.showTables(table, mainConn);
        TableListModel model = ((TableListModel) jTable1.getModel());
        CodeTableListModel codeTableListModel = ((CodeTableListModel) jTable2.getModel());
        model.clear();
        log.debug("cleared");
        model.addTables(showTables);
        codeTableListModel.clear();
        codeTableListModel.addTables(showTables);
    }

    public void start() {

    }

    /** This method is called from within the constructor to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Gtables = new javax.swing.ButtonGroup();
        Gactions = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        export = new javax.swing.JButton();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        tableName = new javax.swing.JTextField();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        diff = new javax.swing.JLabel();
        index = new javax.swing.JCheckBox();
        jButton8 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        datas = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        sql = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        Rbjk = new javax.swing.JRadioButton();
        Rbzk = new javax.swing.JRadioButton();
        Rselect = new javax.swing.JRadioButton();
        Rexecute = new javax.swing.JRadioButton();
        next = new javax.swing.JButton();
        all = new javax.swing.JButton();
        total = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        export.setText("导出脚本");
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });

        jCheckBox2.setText("反选");
        jCheckBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox2ItemStateChanged(evt);
            }
        });

        jButton1.setText("查询");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("比较");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("全选");
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new TableListModel());
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("搜索：");

        jButton5.setText("执行脚本");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        diff.setText("0条不一样");

        index.setText("自动添加索引");

        jButton8.setText("导出数据结构");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tableName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(index)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(diff)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(export)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton8))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tableName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(export)
                        .addComponent(jButton5)
                        .addComponent(diff)
                        .addComponent(jButton8))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jCheckBox1)
                        .addComponent(jCheckBox2)
                        .addComponent(index)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("基础比较", jPanel1);

        jTable2.setModel(new CodeTableListModel());
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);

        jCheckBox3.setText("全选");
        jCheckBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox3ItemStateChanged(evt);
            }
        });

        jCheckBox4.setText("反选");
        jCheckBox4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox4ItemStateChanged(evt);
            }
        });

        jButton3.setText("执行基础数据替换");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("获取标准基础数据");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setText("备份本地库");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton6)))
        );

        jTabbedPane1.addTab("基础数据替换", jPanel2);

        datas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(datas);

        jLabel2.setText("SQL");

        sql.setText("select * from dc_ptyyz");

        jButton7.setText("查询");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        Gtables.add(Rbjk);
        Rbjk.setSelected(true);
        Rbjk.setText("比较库");

        Gtables.add(Rbzk);
        Rbzk.setText("标准库");

        Gactions.add(Rselect);
        Rselect.setSelected(true);
        Rselect.setText("查询模式");

        Gactions.add(Rexecute);
        Rexecute.setText("修改模式");

        next.setText("下一页");
        next.setEnabled(false);
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        all.setText("显示全部");
        all.setEnabled(false);
        all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allActionPerformed(evt);
            }
        });

        total.setText("结果");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sql)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Rbjk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Rbzk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Rselect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Rexecute)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(next)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(all))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(total))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Rbjk)
                    .addComponent(Rbzk)
                    .addComponent(Rselect)
                    .addComponent(Rexecute)
                    .addComponent(next)
                    .addComponent(all))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(sql, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                .addGap(17, 17, 17)
                .addComponent(total))
        );

        jTabbedPane1.addTab("SQL编辑器", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox4ItemStateChanged
        final CodeTableListModel model = ((CodeTableListModel) jTable2.getModel());
        if (jCheckBox4.isSelected()) {
            model.reSelectAllTable();
        } else {
            model.reSelectAllTable();
        }
    }//GEN-LAST:event_jCheckBox4ItemStateChanged

    private void jCheckBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox3ItemStateChanged
        final CodeTableListModel model = ((CodeTableListModel) jTable2.getModel());
        if (jCheckBox3.isSelected()) {
            model.selectAll();
        } else {
            model.unselectAll();
        }
    }//GEN-LAST:event_jCheckBox3ItemStateChanged

    private void jCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox1ItemStateChanged
        final TableListModel model = ((TableListModel) jTable1.getModel());
        if (jCheckBox1.isSelected()) {
            model.selectAll();
        } else {
            model.unselectAll();
        }
    }//GEN-LAST:event_jCheckBox1ItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        final TableListModel model = ((TableListModel) jTable1.getModel());
        model.ini();
        model.setFinished(0);
        final List<String> selectedTables = model.getSelectedTables();
        jProgressBar1.setMaximum(selectedTables.size());
        jProgressBar1.setMinimum(0);
        new Thread() {
            @Override
            public void run() {
                int diffCount = 0;
                for (int i = 0; i < model.getSelectedCount(); i++) {
                    final int j = i;
                    String table = selectedTables.get(j);
                    log.debug("start table:" + table);
                    String mainCreate = compareUtil.showOneCreate(table, ConnectionUtil.getMainConn());
                    String compareCreate = compareUtil.showOneCreate(table, ConnectionUtil.getCompareConn());
                    IColumnMerge columnMerge = compareUtil.getColumnMerge(table, mainCreate);
                    columnMerge.merge(compareCreate);
                    String allChange = columnMerge.getAllChange();
                    if (!ObjectHelper.isNullOrEmptyString(allChange)) {
                        diffCount++;
                    }
                    if (index.isSelected()) {
                        allChange += new IndexUtil(compareUtil).getIndexAddString(table, ConnectionUtil.getCompareConn());
                    }
                    jProgressBar1.setValue(model.getFinished());
                    model.finishRow(table, columnMerge.getStatus(), allChange);
                    diff.setText(diffCount + "条不一样");
                    log.debug("end table:" + table);
                }
            }

        }.start();
    }//GEN-LAST:event_jButton2ActionPerformed


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        iniAll(tableName.getText());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox2ItemStateChanged
        final TableListModel model = ((TableListModel) jTable1.getModel());
        if (jCheckBox2.isSelected()) {
            model.reSelectAllTable();
        } else {
            model.reSelectAllTable();
        }
    }//GEN-LAST:event_jCheckBox2ItemStateChanged

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
        StringBuilder sql_create = new StringBuilder();
        StringBuilder sql_update = new StringBuilder();
        final TableListModel model = ((TableListModel) jTable1.getModel());
        for (int i = 0; i < model.getRowCount(); i++) {
            String table = model.getValueAt(i, 5).toString();
            if (!ObjectHelper.isNullOrEmptyString(table)) {
                if (table.startsWith("CREATE")) {
                    sql_create.append(table);
                } else {
                    sql_update.append(table);
                }
            }
        }
        File sqlfile = new File("update.sql");
        try {
            FileUtils.writeStringToFile(sqlfile, sql_create.append(sql_update).toString().replace("COMMENT '(null)'", ""), "utf-8");
            JOptionPane.showMessageDialog(this, "已经导出到update.sql");
        } catch (IOException ex) {
            log.error("导出文件出错！", ex, "导出文件出错！文件：{}打开错误！", "update.sql");
            JOptionPane.showMessageDialog(this, "导出文件出错！");
        }

    }//GEN-LAST:event_exportActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        IDbManager mainConn = ConnectionUtil.getCompareConn();
        String dbName = compareUtil.getDbName(mainConn);
        String mysql = compareUtil.importDb("dump.sql", dbName, StartFrame.bjk);
        JOptionPane.showMessageDialog(rootPane, "执行完毕,附加信息【" + mysql + "】");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        CodeTableListModel codeTableListModel = ((CodeTableListModel) jTable2.getModel());
        IDbManager mainConn = ConnectionUtil.getMainConn();
        String dbName = compareUtil.getDbName(mainConn);
        String mysqldump = compareUtil.export(codeTableListModel.getSelectedCodeTables(), dbName, StartFrame.bzk);
        JOptionPane.showMessageDialog(rootPane, "备份完成,附加信息【" + mysqldump + "】");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        IDbManager bjk = ConnectionUtil.getCompareConn();
        String dbName = compareUtil.getDbName(bjk);
        String mysql = compareUtil.importDb("update.sql", dbName, StartFrame.bjk);
        JOptionPane.showMessageDialog(rootPane, "执行完毕,附加信息【" + mysql + "】");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        IDbManager bjk = ConnectionUtil.getCompareConn();
        String dbName = compareUtil.getDbName(bjk);
        String mysql = compareUtil.exportDb(dbName, StartFrame.bjk);
        JOptionPane.showMessageDialog(rootPane, "执行完毕,附加信息【" + mysql + "】");
    }//GEN-LAST:event_jButton6ActionPerformed
    Pager pager = new Pager(100);
    private String sqlString;
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            pager = new Pager(100);
            if (Rselect.isSelected()) {
                Hyberbin hyberbin = new Hyberbin(Rbjk.isSelected() ? ConnectionUtil.getCompareConn() : ConnectionUtil.getMainConn());
                hyberbin.getMapList(sql.getText(), pager);
                total.setText("当前显示：" + ((pager.getCurrent() - 1) * pager.getSize() + pager.getData().size()) + "条，总共：" + pager.getItems() + "条");
                DataRowModel model = new DataRowModel(hyberbin.getFieldColumns());
                datas.setModel(model);
                model.addRow(pager.getData());
                fitTableColumns(datas);
                next.setEnabled(true);
                all.setEnabled(true);
                sqlString = sql.getText();
            } else {
                DatabaseAccess access = new DatabaseAccess(Rbjk.isSelected() ? ConnectionUtil.getCompareConn() : ConnectionUtil.getMainConn());
                int update = access.update(sql.getText());
                total.setText(update + "条受影响");
                next.setEnabled(false);
                all.setEnabled(false);
            }
        } catch (SQLException ex) {
            log.error("执行出错!", ex);
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "执行出错！", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        if (Rselect.isSelected()) {
            try {
                pager.setCurrent(pager.getNextPage());
                Hyberbin hyberbin = new Hyberbin(Rbjk.isSelected() ? ConnectionUtil.getCompareConn() : ConnectionUtil.getMainConn());
                hyberbin.getMapList(sqlString, pager);
                total.setText("当前显示：" + ((pager.getCurrent() - 1) * pager.getSize() + pager.getData().size()) + "条，总共：" + pager.getItems() + "条");
                DataRowModel model = (DataRowModel) datas.getModel();
                datas.setModel(model);
                model.addRow(pager.getData());
                fitTableColumns(datas);
                next.setEnabled(true);
                all.setEnabled(true);
            } catch (SQLException ex) {
                log.error("执行出错!", ex);
                JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "执行出错！", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_nextActionPerformed

    private void allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allActionPerformed
        if (Rselect.isSelected()) {
            try {
                Hyberbin hyberbin = new Hyberbin(Rbjk.isSelected() ? ConnectionUtil.getCompareConn() : ConnectionUtil.getMainConn());
                DataRowModel model = (DataRowModel) datas.getModel();
                List mapList = hyberbin.getMapList(sqlString + " limit " + model.getRowCount() + "," + pager.getItems());
                total.setText("当前显示：" + pager.getItems() + "条");
                datas.setModel(model);
                model.addRow(mapList);
                fitTableColumns(datas);
                next.setEnabled(true);
                all.setEnabled(true);
            } catch (SQLException ex) {
                log.error("执行出错!", ex);
                JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "执行出错！", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_allActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        final TableListModel model = ((TableListModel) jTable1.getModel());
        final List<String> selectedTables = model.getSelectedTables();
        final List<String> selectedTablesComments = model.getSelectedTablesComments();
        Workbook workbook = new HSSFWorkbook();
        Sheet sheet = workbook.createSheet();
        int row = 0;
        for (int i = 0; i < selectedTables.size(); i++) {
            Row title = sheet.createRow(row++);
            Cell tableName = title.createCell(0);
            tableName.setCellValue(selectedTables.get(i));
            Cell comment = title.createCell(1);
            comment.setCellValue(selectedTablesComments.get(i));
            Row columnTitles = sheet.createRow(row++);
            setTitle(columnTitles);
            List<Map> tableStructs = compareUtil.getTableStructs(ConnectionUtil.getCompareConn(), selectedTables.get(i));
            for (Map map : tableStructs) {
                Row column = sheet.createRow(row++);
                setRow(column, map);
            }
            sheet.createRow(row++);
        }
        File file = new File("导出.xls");
        FileOutputStream fileOutputStream;
        try {
            fileOutputStream = new FileOutputStream(file);
            workbook.write(fileOutputStream);
            fileOutputStream.close();
        } catch (Exception ex) {
            log.error("导出数据结构出错!", ex);
        }

    }//GEN-LAST:event_jButton8ActionPerformed

    private static void setRow(Row row, Map data) {
        for (int i = 0; i < 4; i++) {
            Cell createCell = row.createCell(i);
            if (i == 0) {
                createCell.setCellValue(data.get("column") + "");
            }
            if (i == 1) {
                createCell.setCellValue(data.get("comment") + "");
            }
            if (i == 2) {
                createCell.setCellValue(getDataType((data.get("data_type") + "").replace("null", "")));
            }
            if (i == 3) {
                createCell.setCellValue((data.get("length") + "").replace("null", ""));
            }
        }
    }
    private static String getDataType(String dbType){
        if("char".equalsIgnoreCase(dbType)){
            return "C";
        }else if("varchar".equalsIgnoreCase(dbType)){
            return "C";
        }else if("int".equalsIgnoreCase(dbType)){
            return "N";
        }else return dbType.toUpperCase();
    }
    private final static String[] titles = new String[]{"字段名", "字段说明", "字段类型", "长度"};

    private static void setTitle(Row row) {
        for (int i = 0; i < 4; i++) {
            Cell createCell = row.createCell(i);
            createCell.setCellValue(titles[i]);
        }
    }

    private void fitTableColumns(JTable myTable) {
        JTableHeader header = myTable.getTableHeader();
        int rowCount = myTable.getRowCount();
        Enumeration columns = myTable.getColumnModel().getColumns();
        while (columns.hasMoreElements()) {
            TableColumn column = (TableColumn) columns.nextElement();
            int col = header.getColumnModel().getColumnIndex(column.getIdentifier());
            int width = (int) myTable.getTableHeader().getDefaultRenderer()
                    .getTableCellRendererComponent(myTable, column.getIdentifier(), false, false, -1, col).getPreferredSize().getWidth();
            for (int row = 0; row < rowCount; row++) {
                int preferedWidth = (int) myTable.getCellRenderer(row, col).getTableCellRendererComponent(myTable,
                        myTable.getValueAt(row, col), false, false, row, col).getPreferredSize().getWidth();
                width = Math.max(width, preferedWidth);
            }
            header.setResizingColumn(column); // 此行很重要
            column.setWidth(width + myTable.getIntercellSpacing().width);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup Gactions;
    private javax.swing.ButtonGroup Gtables;
    private javax.swing.JRadioButton Rbjk;
    private javax.swing.JRadioButton Rbzk;
    private javax.swing.JRadioButton Rexecute;
    private javax.swing.JRadioButton Rselect;
    private javax.swing.JButton all;
    private javax.swing.JTable datas;
    private javax.swing.JLabel diff;
    private javax.swing.JButton export;
    private javax.swing.JCheckBox index;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton next;
    private javax.swing.JTextField sql;
    private javax.swing.JTextField tableName;
    private javax.swing.JLabel total;
    // End of variables declaration//GEN-END:variables
}
